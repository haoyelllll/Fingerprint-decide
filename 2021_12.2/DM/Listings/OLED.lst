C51 COMPILER V9.60.0.0   OLED                                                              12/02/2021 20:42:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\OLED.obj
COMPILER INVOKED BY: D:\DPJJX     proteus\Keil\Keil\C51\BIN\C51.EXE OLED.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\DM) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\OLED.lst) TABS(2) OBJECT(.\Objects\OLED.obj)

line level    source

   1          #include <intrins.h>
   2          #include "stc89c52.h"
   3          #include <stdlib.h>
   4          #include <string.h>
   5          #include "oled_font.h"
   6          #include "delay.h"
   7          #include "oled.h"
   8          
   9          
  10          
  11          
  12          //spi通信协议
  13          
  14          void SPI_WriteByte(u8 byte)
  15          { 
  16   1        u8 i;
  17   1        for(i=0;i<8;i++)
  18   1        {       
  19   2          if(byte&0x80)
  20   2          {
  21   3            OLED_MOSI_Set();
  22   3          }
  23   2          else
  24   2          {
  25   3            OLED_MOSI_Clr();
  26   3          }
  27   2          OLED_CLK_Clr();
  28   2          OLED_CLK_Set();
  29   2          byte<<=1;   
  30   2        }             
  31   1      }
  32          void OLED_WR_Byte(unsigned dat,unsigned cmd)
  33          {
  34   1        if(cmd)
  35   1        {
  36   2          OLED_DC_Set();
  37   2        }
  38   1        else
  39   1        {
  40   2          OLED_DC_Clr();
  41   2        }
  42   1        OLED_CS_Clr();
  43   1        SPI_WriteByte(dat);
  44   1        OLED_CS_Set();
  45   1      }
  46          
  47          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  48          {
  49   1        OLED_WR_Byte(YLevel+y,OLED_CMD);
  50   1        OLED_WR_Byte(((x+2&0xf0)>>4)|0x10,OLED_CMD);
  51   1        OLED_WR_Byte((x+2&0x0f),OLED_CMD); 
  52   1      }  
  53                  
  54          void OLED_Clear(unsigned dat)  
C51 COMPILER V9.60.0.0   OLED                                                              12/02/2021 20:42:06 PAGE 2   

  55          { 
  56   1        u8 i,n,color; 
  57   1        if(dat)
  58   1        {
  59   2          color = 0xff;
  60   2        }
  61   1        else
  62   1        {
  63   2          color = 0;
  64   2        }
  65   1        for(i=0;i<PAGE_SIZE;i++)  
  66   1        {  
  67   2          OLED_WR_Byte(YLevel+i,OLED_CMD);    //设置页地址（0~7）
  68   2          OLED_WR_Byte(XLevelL,OLED_CMD);      //设置显示位置―列低地址
  69   2          OLED_WR_Byte(XLevelH,OLED_CMD);      //设置显示位置―列高地址   
  70   2          for(n=0;n<WIDTH;n++)
  71   2          {
  72   3            OLED_WR_Byte(color,OLED_DATA); 
  73   3          }
  74   2        }   //更新显示
  75   1      }
  76          
  77          void OLED_Reset(void)
  78          {
  79   1        OLED_RST_Set();
  80   1        Delay_Ms(100);
  81   1        OLED_RST_Clr();
  82   1        Delay_Ms(100);
  83   1        OLED_RST_Set(); 
  84   1      } 
  85            
  86          void OLED_Init(void)
  87          {
  88   1        OLED_Reset();     //复位OLED
  89   1      
  90   1      /**************初始化SSD1306*****************/  
  91   1        OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/
  92   1        OLED_WR_Byte(0x00,OLED_CMD); /*set lower column address*/
  93   1        OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/
  94   1        OLED_WR_Byte(0x40,OLED_CMD); /*set display start line*/ 
  95   1        OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/
  96   1        OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/ 
  97   1        OLED_WR_Byte(0xFF,OLED_CMD); /*128*/
  98   1        OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/ 
  99   1        OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/
 100   1        OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/ 
 101   1        OLED_WR_Byte(0x3F,OLED_CMD); /*duty = 1/64*/
 102   1        OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/
 103   1        OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/ 
 104   1        OLED_WR_Byte(0x00,OLED_CMD);
 105   1        OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/ 
 106   1        OLED_WR_Byte(0x80,OLED_CMD);
 107   1        OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/ 
 108   1        OLED_WR_Byte(0XF1,OLED_CMD);
 109   1        OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/ 
 110   1        OLED_WR_Byte(0x12,OLED_CMD);
 111   1        OLED_WR_Byte(0xDB,OLED_CMD); /*set vcomh*/ 
 112   1        OLED_WR_Byte(0x30,OLED_CMD);
 113   1        OLED_WR_Byte(0x8D,OLED_CMD); /*set charge pump disable*/ 
 114   1        OLED_WR_Byte(0x14,OLED_CMD);
 115   1        OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/
 116   1      }  
C51 COMPILER V9.60.0.0   OLED                                                              12/02/2021 20:42:06 PAGE 3   

 117          
 118          
 119          
 120          void GUI_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
 121          {       
 122   1          unsigned char c=0,i=0,j=0;  
 123   1          c=chr-' ';//得到偏移后的值      
 124   1          if(x>WIDTH-1)
 125   1          {
 126   2            x=0;
 127   2            y=y+2;
 128   2          }
 129   1          if(Char_Size ==16)
 130   1          {
 131   2            for(j=0;j<2;j++)
 132   2            {
 133   3              OLED_Set_Pos(x,y+j);
 134   3              for(i=0;i<8;i++)
 135   3              {
 136   4                  OLED_WR_Byte(F8X16[c*16+i+j*8],OLED_DATA);
 137   4              }
 138   3            }
 139   2           }
 140   1           else 
 141   1           {  
 142   2              OLED_Set_Pos(x,y);
 143   2              for(i=0;i<6;i++)
 144   2              {
 145   3                  OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 146   3              }
 147   2          }
 148   1      }
 149          
 150          void GUI_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
 151          {
 152   1        unsigned char j=0,csize;
 153   1        if(Char_Size == 16)
 154   1        {
 155   2          csize = Char_Size/2;
 156   2        }
 157   1        else if(Char_Size == 8)
 158   1        {
 159   2          csize = Char_Size/2+2;
 160   2        }
 161   1        else
 162   1        {
 163   2          return;
 164   2        }
 165   1        while (chr[j]!='\0')
 166   1        {   
 167   2          GUI_ShowChar(x,y,chr[j],Char_Size);
 168   2          x+=csize;
 169   2          if(x>120)
 170   2          {
 171   3            x=0;
 172   3            y+=Char_Size/8;
 173   3          }
 174   2          j++;
 175   2        }
 176   1      }
 177          
 178          static u32 mypow(u8 m,u8 n)
C51 COMPILER V9.60.0.0   OLED                                                              12/02/2021 20:42:06 PAGE 4   

 179          {
 180   1        u32 result=1;  
 181   1        while(n--)result*=m;    
 182   1        return result;
 183   1      }
 184          
 185          void GUI_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 Size)
 186          {           
 187   1        u8 t,temp;
 188   1        u8 enshow=0,csize;
 189   1        if(Size == 16)
 190   1        {
 191   2          csize = Size/2;
 192   2        }
 193   1        else if(Size == 8)
 194   1        {
 195   2          csize = Size/2+2;
 196   2        }   
 197   1        else
 198   1        {
 199   2          return;
 200   2        }
 201   1        for(t=0;t<len;t++)
 202   1        {
 203   2          temp=(num/mypow(10,len-t-1))%10;
 204   2          if(enshow==0&&t<(len-1))
 205   2          {
 206   3            if(temp==0)
 207   3            {
 208   4              GUI_ShowChar(x+csize*t,y,' ',Size);
 209   4              continue;
 210   4            }
 211   3            else 
 212   3            {
 213   4              enshow=1; 
 214   4            }
 215   3          }
 216   2          GUI_ShowChar(x+csize*t,y,temp+'0',Size); 
 217   2        }
 218   1      }
 219          void GUI_Showfont16(u8 x,u8 y,u8 *s)
 220          {
 221   1        u8 i,j,k,tmp;
 222   1        u16 num;
 223   1        num = sizeof(cfont16)/sizeof(typFNT_GB16);
 224   1        for(i=0;i<num;i++)
 225   1        {
 226   2          if((cfont16[i].Index[0]==*s)&&(cfont16[i].Index[1]==*(s+1)))
 227   2          {
 228   3            for(k=0;k<2;k++)
 229   3            {
 230   4              OLED_Set_Pos(x,y+k);
 231   4              for(j=0;j<16;j++)
 232   4              {
 233   5                tmp = cfont16[i].Msk[j+k*16];
 234   5                OLED_WR_Byte(tmp,OLED_DATA);
 235   5              }
 236   4            } 
 237   3            break;
 238   3          } 
 239   2        }
 240   1      }
C51 COMPILER V9.60.0.0   OLED                                                              12/02/2021 20:42:06 PAGE 5   

 241          void GUI_ShowCHinese(u8 x,u8 y,u8 *str)
 242          { 
 243   1        u8 hsize =16;
 244   1        while(*str!='\0')
 245   1        {
 246   2            GUI_Showfont16(x,y,str);
 247   2          x+=hsize;
 248   2          if(x>WIDTH-hsize)
 249   2          {
 250   3            x=0;
 251   3            y+=hsize/8;
 252   3          }
 253   2          str+=2;
 254   2        }     
 255   1      }
 256          
 257          /*void GUI_DrawBMP(u8 x,u8 y,u8 width, u8 height, u8 BMP[])
 258          {   
 259           u8 i,j;
 260           u8 tmp;
 261           for(i=0;i<(height+7)/8;i++)
 262           {
 263              OLED_Set_Pos(x,y+i);
 264              for(j=0;j<width;j++)
 265              {   
 266                    tmp = BMP[i*width+j];
 267                Delay_Ms(5);
 268                  OLED_WR_Byte(tmp,OLED_DATA);
 269              }
 270           } 
 271          }
 272          void kaiss(u8 x,u8 y)
 273          {
 274            u8 i,j,k;
 275            u8 a=0;
 276            u8 tmp;
 277           for(i=0;i<11;i++)
 278           {
 279             for(k=0;k<2;k++)
 280             {
 281               OLED_Set_Pos(x,y+k);
 282                for(j=0;j<12;j++)
 283                {
 284                    tmp = kais[a+j+12*k];
 285                  OLED_WR_Byte(tmp,OLED_DATA);
 286                }
 287                
 288             } a=24*i;x =i*12;
 289           }
 290          }
 291          void TEST_BMP(void)
 292          {
 293            GUI_DrawBMP(40,0,48,48,BMP);
 294            Delay_Ms(50);
 295            kaiss(4,6);
 296            
 297          }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1132    ----
   CONSTANT SIZE    =   2852    ----
C51 COMPILER V9.60.0.0   OLED                                                              12/02/2021 20:42:06 PAGE 6   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      46
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
